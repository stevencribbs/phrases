// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Service schema It should only change intentionally 1`] = `
"type Query {
  ping(phrase: String): String!
  phrasesForUser(userKey: String!): [Phrase!]!
  phrasesByType(phraseType: String!, userKey: String!): [Phrase!]!
  getUsers: [User!]!
  me: User
}

type Phrase {
  userKey: ID!
  phraseKey: String!
  author: String
  phraseType: String
  text: String
  tags: [String!]
  source: String
}

type User {
  userKey: String!
  firstName: String!
  lastName: String!
  name: String!
  email: String!
  confirmed: Boolean!
}

type Mutation {
  createPhrase(phrase: CreatePhraseInput!): PhraseCreatedOutput!
  updatePhrase(phrase: UpdatePhraseInput!): PhraseUpdatedOutput!
  deletePhrase(deletePhraseInput: DeletePhraseInput!): DeletePhraseResult!
  registerUser(user: RegisterUserInput!): User!
  login(password: String!, email: String!): User
  confirmUser(token: String!): Boolean!
  forgotPassword(email: String!): String!
  changePassword(data: ChangePasswordInput!): User
  logout: Boolean!
}

type PhraseCreatedOutput {
  phrase: Phrase!
}

input CreatePhraseInput {
  userKey: String!
  phraseType: String!
  author: String
  text: String
  tags: [String!]
  source: String
}

type PhraseUpdatedOutput {
  phrase: Phrase!
}

input UpdatePhraseInput {
  userKey: String!
  phraseKey: String!
  author: String
  phraseType: String
  text: String
  tags: [String!]
  source: String
}

union DeletePhraseResult = PhraseDeletedOutput | GQLError

type PhraseDeletedOutput {
  result: String!
}

type GQLError {
  message: String!
}

input DeletePhraseInput {
  userKey: String!
  phraseKey: String!
}

input RegisterUserInput {
  password: String!
  firstName: String!
  lastName: String!
  email: String!
}

input ChangePasswordInput {
  password: String!
  token: String!
}"
`;
